Features
  - random avatar and advisor profile from https://randomuser.me/
    - add fun boring-corporate version http://www.avatarpro.biz/avatar?s=256
  -- ask for email
    - show "is typing" at the email screen
  -- show winning answer to advisors that lost (were not picked by a user to chat):
    this way advisors can learn what makes a good answer good, we can hide advisor info if that is an issue.


Day #1
+- Initial infra for emberjs with bootstrap
- HTML mock for,
    +- Consumer page /ask-keen
    -  Advisor page /dashboard?advisorid={id}
    - Chat page  /chat?advisorid={id}&consumerid={id}

-- Server & client push notification component:
  - SocketIO server & client samples with command line push messages

- Client notification popup widgets (which should also support form to be part of it):
    https://github.com/sciactive/pnotify,
    https://github.com/needim/noty
    http://notifyjs.com/,
    https://github.com/ehynds/jquery-notify


Day #2

Bonus:
- Using some NLP, try to find the type of question posted and when informing advisor about the likeliness of a question arriving,
  mention about the type of question he might expect
- add realtime Hook integration with Slack to send user quesions, just to have fun during demo and show the power of mordern web:
	it's very easy https://ingenio.slack.com/services/new/incoming-webhook
- add iPhone notifications for advisors

Issues:
=========

Sample Data & Event-names:
==========================


Consumer side
- SEND:
  - event-name: new-question-posted
  - data: {userId: 1234, question: 'Question from user'}
- RECEIVE:
  - event-name: new-advisor-answer
  - data: {advisorId: 101, answer: 'Sample answer from advisor'}   //All the other data which are required by the UI to construct the message-component

Advisor side
- SEND: When he/she is done with replying the question
- RECEIVE:
  - event-name: new-question-posted
  - data: {userId: 1234, question: 'Question from user'}

